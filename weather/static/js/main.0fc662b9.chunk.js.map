{"version":3,"sources":["app_component/form.component.jsx","app_component/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["cityInput","params","react_default","a","createElement","style","background","type","className","placeholder","name","autoComplete","countryInput","getWeatherButton","error","errorMessage","role","Form","props","onSubmit","loadweather","display","flexDirection","get_WeatherIcon","rangeId","exitButton","exit","icon","onClick","fahrenheit","degree","maxminTemp","min","max","weatherDescription","description","Weather","values","length","backgroundStyle","num","charAt","toUpperCase","slice","concat","Api_Key","App","_useState","useState","_useState2","Object","slicedToArray","setError","_useState3","undefined","_useState4","setErrorMessage","_useState5","_useState6","setValues","calFahrenheit","temp","Math","floor","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","countryValue","cityValue","api_call","response","wrap","_context","prev","next","preventDefault","target","elements","country","value","city","fetch","sent","json","cod","sys","main","temp_min","temp_max","weather","id","stop","_x","apply","this","arguments","form_component","weather_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fc662b9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./form.style.css\";\n\nconst Form = props => {\n  return (\n    <div className=\"container h-100\">\n      <form onSubmit={props.loadweather}>\n        <div>{props.error ? error(props.errorMessage) : \"\"}</div>\n        <div className=\"row\" style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <div className=\"col-md-3 offset-md-2\">\n            {/* Get city input */}\n            {cityInput()}\n          </div>\n          <div className=\"col-md-3\">\n            {/* Get country input */}\n            {countryInput()}\n          </div>\n          {/* Get Weather Event */}\n          {getWeatherButton()}\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst cityInput = params => {\n  return (\n    <input\n      style={{ background: \"black\" }}\n      type=\"text\"\n      className=\"form-control\"\n      placeholder=\"City\"\n      name=\"city\"\n      autoComplete=\"off\"\n    />\n  );\n};\n\nconst countryInput = params => {\n  return (\n    <input\n      style={{ background: \"black\" }}\n      type=\"text\"\n      className=\"form-control\"\n      placeholder=\"Country\"\n      name=\"country\"\n      autoComplete=\"off\"\n    />\n  );\n};\n\nconst getWeatherButton = () => {\n  return (\n    <span className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\n      <button className=\"btn btn-warning\">Get Weather</button>\n    </span>\n  );\n};\n\nconst error = errorMessage => {\n  return (\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"./weather.style.css\";\n\nconst Weather = props => {\n  const { values } = props;\n\n  /* if value has loaded */\n  if (values.length > 0) {\n    var backgroundStyle = \"black\";\n    var num = values[6].charAt(0).toUpperCase() + values[6].slice(1);\n    values[7] = get_WeatherIcon(values[7]);\n  }\n\n  return (\n    <div className=\"container text-light\">\n      <div className=\"Card\" style={{ background: backgroundStyle }}>\n        {exitButton(values[0])}\n        <h1 className=\"text-white py-3\">\n          {values[1]} , {values[2]}\n        </h1>\n        <h5 className=\"py-4\">\n          <i className={`wi ${values[7]} display-1`} />\n        </h5>\n\n        {/* Get fahrenheit */}\n        {values[3] ? fahrenheit(values[3]) : null}\n\n        {/* max and min temp */}\n        {maxminTemp(values[3], values[4])}\n\n        {/* weather Description */}\n        {weatherDescription(num)}\n      </div>\n    </div>\n  );\n};\n\nconst get_WeatherIcon = rangeId => {\n  switch (true) {\n    case rangeId >= 200 && rangeId < 232:\n      return \"wi-thunderstorm\";\n    case rangeId >= 300 && rangeId <= 321:\n      return \"wi-sleet\";\n    case rangeId >= 500 && rangeId <= 521:\n      return \"wi-storm-showers\";\n    case rangeId >= 600 && rangeId <= 622:\n      return \"wi-snow\";\n    case rangeId >= 701 && rangeId <= 781:\n      return \"wi-fog\";\n    case rangeId === 800:\n      return \"wi-day-sunny\";\n    case rangeId >= 801 && rangeId <= 804:\n      return \"wi-day-fog\";\n    default:\n      return \"wi-day-fog\";\n  }\n};\n\nconst exitButton = (exit, icon) => {\n  if (exit) {\n    return (\n      <button className=\"exitButton\" onClick={() => exit([])}>\n        x\n      </button>\n    );\n  }\n};\n\nconst fahrenheit = degree => {\n  return <h4 className=\"py-2\">Current Temp: {degree}&deg;</h4>;\n};\n\nconst maxminTemp = (min, max) => {\n  if (max && min) {\n    return (\n      <h3>\n        <span className=\"px-4\">Min: {min}&deg;</span>\n        <span className=\"px-4\">Max: {max}&deg;</span>\n      </h3>\n    );\n  }\n};\n\nconst weatherDescription = description => {\n  return <h4 className=\"py-3\">{description}</h4>;\n};\n\nexport default Weather;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"aa9ca83667bc4ee44b48a0527c0586a4\";\n\nfunction App() {\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(undefined);\n  const [values, setValues] = useState([]);\n\n  const calFahrenheit = temp => {\n    let cell = Math.floor((temp - 273.15) * 1.8 + 32);\n    return cell;\n  };\n\n  const getWeather = async e => {\n    e.preventDefault();\n    const countryValue = e.target.elements.country.value;\n    const cityValue = e.target.elements.city.value;\n\n    if (countryValue && cityValue) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${cityValue},${countryValue}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n      if (response.cod !== \"404\") {\n        setError(false);\n\n        //array that contains all of the weather information returned from the api call\n        setValues([\n          setValues,\n          response.name,\n          response.sys.country,\n          calFahrenheit(response.main.temp),\n          calFahrenheit(response.main.temp_min),\n          calFahrenheit(response.main.temp_max),\n          response.weather[0].description,\n          response.weather[0].id\n        ]);\n      } else {\n        setError(true);\n        setErrorMessage(\"Invalid City or Country\");\n      }\n    } else {\n      setError(true);\n      setErrorMessage(\"Please Enter City and Country...\");\n    }\n  };\n  return (\n    <div className=\"App\">\n      <Form\n        loadweather={getWeather}\n        error={error}\n        errorMessage={errorMessage}\n      />\n      <Weather values={values} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}